{
  "_args": [
    [
      {
        "raw": "@microsoft/microsoft-graph-client@^0.4.1",
        "scope": "@microsoft",
        "escapedName": "@microsoft%2fmicrosoft-graph-client",
        "name": "@microsoft/microsoft-graph-client",
        "rawSpec": "^0.4.1",
        "spec": ">=0.4.1 <0.5.0",
        "type": "range"
      },
      "/home/dan/work/build-preday"
    ]
  ],
  "_from": "@microsoft/microsoft-graph-client@>=0.4.1 <0.5.0",
  "_id": "@microsoft/microsoft-graph-client@0.4.1",
  "_inCache": true,
  "_location": "/@microsoft/microsoft-graph-client",
  "_nodeVersion": "7.4.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/microsoft-graph-client-0.4.1.tgz_1490286991342_0.11662963777780533"
  },
  "_npmUser": {
    "name": "dan-silver",
    "email": "dansil@microsoft.com"
  },
  "_npmVersion": "4.0.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@microsoft/microsoft-graph-client@^0.4.1",
    "scope": "@microsoft",
    "escapedName": "@microsoft%2fmicrosoft-graph-client",
    "name": "@microsoft/microsoft-graph-client",
    "rawSpec": "^0.4.1",
    "spec": ">=0.4.1 <0.5.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@microsoft/microsoft-graph-client/-/microsoft-graph-client-0.4.1.tgz",
  "_shasum": "a848aa363953b1fecd65159d8519b17559752172",
  "_shrinkwrap": null,
  "_spec": "@microsoft/microsoft-graph-client@^0.4.1",
  "_where": "/home/dan/work/build-preday",
  "bugs": {
    "url": "https://github.com/microsoftgraph/msgraph-sdk-javascript/issues"
  },
  "dependencies": {
    "es6-promise": "^4.1.0",
    "superagent": "^3.5.2"
  },
  "description": "Microsoft Graph Client Library",
  "devDependencies": {
    "@types/mocha": "^2.2.34",
    "@types/superagent": "^2.0.36",
    "browserify": "^13.1.0",
    "mocha": "^3.2.0",
    "typescript": "^2.2.1"
  },
  "directories": {},
  "dist": {
    "shasum": "a848aa363953b1fecd65159d8519b17559752172",
    "tarball": "https://registry.npmjs.org/@microsoft/microsoft-graph-client/-/microsoft-graph-client-0.4.1.tgz"
  },
  "files": [
    "lib/"
  ],
  "gitHead": "9ff9eae4317f298770b494ceebc526f2d30671ac",
  "homepage": "https://github.com/microsoftgraph/msgraph-sdk-javascript#readme",
  "main": "lib/src/index.js",
  "maintainers": [
    {
      "name": "dan-silver",
      "email": "dansil@microsoft.com"
    },
    {
      "name": "microsoft",
      "email": "npmjs@microsoft.com"
    }
  ],
  "name": "@microsoft/microsoft-graph-client",
  "optionalDependencies": {},
  "readme": "# Microsoft Graph JavaScript Client Library\r\n[![npm version badge](https://img.shields.io/npm/v/@microsoft/microsoft-graph-client.svg?maxAge=86400)](https://www.npmjs.com/package/@microsoft/microsoft-graph-client)\r\n[![Travis](https://travis-ci.org/microsoftgraph/msgraph-sdk-javascript.svg?branch=master&style=flat-square)](https://travis-ci.org/microsoftgraph/msgraph-sdk-javascript)\r\n\r\nThe Microsoft Graph JavaScript client library is a lightweight wrapper around the Microsoft Graph API that supports both Node and the browser.  See the [samples](samples) folder for code examples.  You can also use our [TypeScript graph types](https://github.com/microsoftgraph/msgraph-typescript-typings) with this library. \r\n\r\n> This client library is currently in preview and we would love to hear your feedback!  You can file an issue in this repository or write on our [uservoice page](https://officespdev.uservoice.com/).  We're also trying to add more intellisense support beyond the current typings so we're also especially interested in feedback on the [Microsoft Graph TypeScript Typings](https://github.com/microsoftgraph/msgraph-typescript-typings).\r\n\r\n## Installation\r\n### Node\r\nYou can find installation instructions at the [Node.js website](https://nodejs.org/).\r\n\r\n```npm install @microsoft/microsoft-graph-client```\r\n\r\nInclude the library in your JavaScript file with `const MicrosoftGraph = require(\"@microsoft/microsoft-graph-client\");`\r\n\r\n### Browser\r\n\r\nInclude [lib/graph-js-sdk-web.js](https://github.com/microsoftgraph/msgraph-sdk-javascript/raw/master/lib/graph-js-sdk-web.js) in your page.\r\n```html\r\n<script type=\"text/javascript\" src=\"graph-js-sdk-web.js\"></script>\r\n```\r\n## Changelog\r\n#### 0.4.0\r\n* Add support for ES5. Make sure to use `graph-js-sdk-web.js` for web apps\r\n* Removed iterator helper method.\r\n\r\n#### 0.3.1\r\n* Support for Node.js versions 4 and 5\r\n\r\n#### 0.3.0\r\n* Migrated away from typings in client library core and TypeScript sample\r\n\r\n#### 0.2.2\r\n* Updated SuperAgent to version ``` 3.3.0 ```\r\n\r\n#### 0.2.0\r\n* **Breaking change for existing apps** - Initialize the client library with `MicrosoftGraph.Client.init({...})`. See the updated usage section below for code samples.\r\n* Added response handling tests to simulate Graph calls\r\n* Added type declarations file for core client library, which adds intellisense for chained methods.\r\n\r\n\r\n## Usage\r\n### Initialize client with access token provider\r\nThis client library only handles authentication in the most basic way possible. The application is responsible for refreshing tokens and returning an immediately valid access token in the authentication provider.\r\n```javascript\r\n\r\nvar client = MicrosoftGraph.Client.init({\r\n    authProvider: (done) => {\r\n        done(null, \"PassInAccessTokenHere\"); //first parameter takes an error if you can't get an access token\r\n    }\r\n});\r\n\r\n```\r\n\r\n### Calling pattern\r\n\r\nAll calls to Microsoft Graph are chained together starting with `client.api(path)`.  Path supports the following formats:  \r\n\r\n* me\r\n* /me\r\n* https://graph.microsoft.com/v1.0/me\r\n* https://graph.microsoft.com/beta/me\r\n* me/events?$filter=startswith(subject, 'ship')\r\n\r\nFor more examples of accepted paths, see the [test cases](tests/urlParsing.js).\r\n\r\n```javascript\r\n// Example calling /me with no parameters\r\nclient\r\n    .api('/me')\r\n    .get((err, res) => {\r\n        console.log(res); // prints info about authenticated user\r\n    });\r\n```\r\n\r\nCalls should start with `.api()`, then chain query parameters and end with an action.\r\n```javascript\r\n// get the names of my top 5 contacts on the beta endpoint\r\nclient\r\n    .api('me/people')\r\n    .version(\"beta\") //optional, but recommeded to have before query params\r\n    .top(5)\r\n    .select(\"displayName\")\r\n    .get((err, res) => {\r\n        const topContacts = res.value.map((u) => {return u.displayName});    \r\n        console.log(\"Your top contacts are\", topContacts.join(\", \"));\r\n    });\r\n```\r\n\r\nThe actions(.get(), .put(), etc.) accept a callback or don't pass in a function to get back a Promise.\r\n```javascript\r\nclient\r\n    .api('/me')\r\n    .select(\"displayName\")\r\n    .get()\r\n    .then((res) => {\r\n        console.log(res);\r\n    }).catch((err) => {\r\n        console.log(err);\r\n    });\r\n```\r\n\r\n## Actions\r\n\r\n### .post() and .patch()\r\nThe first parameter of `.post()` and `.patch()` takes an object that will be sent as the content of the request.\r\n\r\n````javascript\r\n// construct the email object\r\nconst mail = {\r\n    subject: \"Microsoft Graph JavaScript Sample\",\r\n    toRecipients: [{\r\n        emailAddress: {\r\n            address: \"example@example.com\"\r\n        }\r\n    }],\r\n    body: {\r\n        content: \"<h1>MicrosoftGraph JavaScript Sample</h1>Check out https://github.com/microsoftgraph/msgraph-sdk-javascript\",\r\n        contentType: \"html\"\r\n    }\r\n}\r\n\r\nclient\r\n    .api('/users/me/sendMail')\r\n    .post({message: mail}, (err, res) => {\r\n        console.log(res)\r\n    })\r\n````\r\n\r\n### `.del()` and `.delete()`\r\n\r\n````javascript\r\n// delete a OneDrive item\r\nclient\r\n    .api(`/me/drive/items/${ONE_DRIVE_FILE_ID_TO_DELETE}`)\r\n    .delete((err, res) => {\r\n        if (err) {\r\n            console.log(err)\r\n            return;\r\n        }\r\n        console.log(res)\r\n    })\r\n\r\n````\r\n### `.put()` and `.putStream()`\r\n\r\nYou can upload files to the graph using `.put()`.  For example, this can be used to update a profile picture from an HTML input form.  See the [browser sample](samples/browser) for complete code.\r\n\r\n```javascript\r\nvar file = document.querySelector('input[type=file]').files[0];\r\n\r\nclient\r\n    .api('/me/photo/$value')\r\n    .put(file, (err, res) => {\r\n        if (err) {\r\n            console.log(err);\r\n            return;\r\n        }\r\n        console.log(\"We've updated your picture!\");\r\n    });\r\n```\r\n\r\n\r\nUse `.putStream()` to upload files to Microsoft Graph with Node.js streams.\r\n````javascript\r\n\r\n// Upload a file to OneDrive\r\nlet fs = require('fs'); // requires filesystem module\r\nlet stream = fs.createReadStream('./logo.png'); //path to local file\r\nclient\r\n    .api('/me/drive/root/children/logo.png/content') // path to the destination in OneDrive\r\n    .put(stream, (err) => {\r\n        console.log(err);\r\n    });\r\n````\r\n\r\n### `.getStream()`\r\nUse `.getStream()` to stream a download from Microsoft Graph.\r\n````javascript\r\nconst fs = require('fs'); // requires filesystem module\r\nclient\r\n    .api('/me/drive/root/children/Book.xlsx/content') // path of  source file in OneDrive\r\n    .getStream((err, downloadStream) => {\r\n        let writeStream = fs.createWriteStream('Book.xlsx'); // path to save file to\r\n        downloadStream.pipe(writeStream).on('error', console.log);\r\n    });\r\n````\r\n\r\n\r\n## Query Parameters\r\n### $select, $expand and $orderby\r\nThese methods can take a string property, an array of strings or you can pass in each value as a separate argument.\r\n````js\r\n.select(\"birthday\")\r\n.select(\"department\")\r\n// same as\r\n.select(\"birthday\", \"department\")\r\n// same as\r\n.select([\"birthday\", \"department\"])\r\n````\r\n```javascript\r\nclient\r\n    .api('/me/people')\r\n    .select([\"displayName\", \"department\", \"title\"])\r\n    .get((err, res) => {\r\n        console.log(res)\r\n    })\r\n```\r\n\r\n### $top and $skip\r\nThese parameters only take a number. Calling them multiple times is not supported.\r\n\r\n````js\r\n.top(5)\r\n.skip(10)\r\n````\r\n\r\n### $count\r\nSet .count() to true to also return the number of objects in the collection.\r\n\r\n````js\r\n.count(true)\r\n````\r\n\r\n### $filter\r\nPass a filter string to `.filter()` for filtering result collections.  Calling filter multiple times will override previous filter strings.\r\n````js\r\nclient\r\n    .api(\"/users\")\r\n    .filter(\"startswith(displayName, 'david')\")\r\n    .get((err, res) => {\r\n        console.log(res)\r\n    })\r\n````\r\n\r\n## Other API methods\r\n\r\n### .version()\r\nPassing in a version through `.version()` has the highest priority. It overrides the Microsoft Graph client default version from `.init()` and the global library default (currently v1.0).\r\n\r\n### .query()\r\nYou can pass in any URL query parameters as a dictionary or string.\r\n````javascript\r\n.query({\"$select\":\"displayName\"})\r\n// same as \r\n.query(\"$select=displayName\")\r\n// same as\r\n.select(\"displayName\")\r\n\r\n````\r\n\r\n### .header() and .headers()\r\nYou can pass in additional request headers, either individually or in a dictionary.\r\n````javascript\r\n.header(\"someHeaderName\", \"someHeaderValue\")\r\n// or\r\n.headers({\"someHeaderName\":\"someHeaderValue\"})\r\n\r\n````\r\n\r\n### .responseType()\r\nTo set a custom response type, use the `.responseType(string)` method.  To see an example, check the [browser sample](samples/browser/index.html) that downloads an image and displays it in an `<img>` element.\r\n\r\n## Additional information\r\n### Options in `MicrosoftGraph.Client.init()`\r\n\r\nThe following are optional parameters to pass to MicrosoftGraph.Client.init(), except for the authProvider:\r\n* defaultVersion - When .version() isn't called, this version is used. (defaults to v1.0)\r\n* debugLogging - Set to true to see the URL of the request printed.\r\n* authProvider - See the [usage](#usage) section for info.\r\n* baseUrl - If you need to call a different URL instead of graph.microsoft.io, specify it as a string here.\r\n\r\n### Full service response\r\nThe full response containing the headers, status code, and body can be obtained by passing a third parameter to the callback.\r\n````javascript\r\nclient\r\n    .api('/me')\r\n    .select(\"displayName\")\r\n    .get((err, res, rawResponse) => {\r\n        console.log(rawResponse.statusCode);\r\n        console.log(rawResponse.header);\r\n    });\r\n````\r\n\r\n### Native date objects can be passed in as parameters\r\n```javascript\r\nvar date = new Date();\r\ndate.setDate(date.getDate()-365); // ~ 1 year ago\r\n\r\nclient\r\n    .api('/me')\r\n    .body({\"birthday\": date})\r\n    .update((err, res) => {\r\n        console.log(\"Updated my birthday\")\r\n    })\r\n```\r\n\r\n## Development\r\nThese steps are not required to use this library.\r\n\r\n```npm install``` installs development dependencies (TypeScript, Mocha, etc.).\r\n> **Note:** If you want to run ```tsc``` from the command line, install TypeScript globally with ```npm install -g typescript``` or reference `./node_modules/.bin/tsc`\r\n\r\n```npm run build``` generates lib/ files for node and browser versions.\r\n\r\n```npm pack``` bundles the npm module.\r\n\r\n```npm test``` runs tests.\r\n\r\nTo build only browser version:\r\n```\r\nnode node-browserify.js > lib/graph-js-sdk-web.js\r\n```\r\n\r\n## Questions and comments\r\n\r\nWe'd love to get your feedback about the Microsoft Graph JavaScript client library. You can send your questions and suggestions to us in the [Issues](https://github.com/microsoftgraph/msgraph-sdk-javascript/issues) section of this repository.\r\n\r\n\r\n## Contributing\r\nPlease see the [contributing guidelines](CONTRIBUTING.md).\r\n\r\n## Additional resources\r\n\r\n* [Microsoft Graph website](https://graph.microsoft.io)\r\n* [Microsoft Graph TypeScript types](https://github.com/microsoftgraph/msgraph-typescript-typings/)\r\n* [Angular.js sample using the JavaScript client library](https://github.com/microsoftgraph/angular-connect-sample)\r\n* [Node.js sample using the JavaScript client library](https://github.com/microsoftgraph/nodejs-connect-sample)\r\n* [Office Dev Center](http://dev.office.com/)\r\n\r\n## Copyright\r\nCopyright (c) 2016 Microsoft. All rights reserved.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/microsoftgraph/msgraph-sdk-javascript.git"
  },
  "scripts": {
    "build": "tsc && node node-browserify.js > lib/graph-js-sdk-web.js",
    "test": "mocha lib/test"
  },
  "types": "./lib/src/index.d.ts",
  "typings": "lib/src/index",
  "version": "0.4.1"
}
